name: Deploy Workflow to Logic App
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Choose the environment"
        options:
          - DEV
          - UAT
          - PRD
        required: true
      resourceGroupName:
        description: "Resource Group Name"
        required: true
      logicAppName:
        description: "Logic App Name"
        required: true
      appname:
        required: true
        type: string
        default: app1
        description: "App Folder name"
      commitid:
        required: false
        type: string
        description: "Commit# to deploy"
      connections:
        required: true
        type: boolean
        default: false
        description: "set to true if the app needs an API connection"
      enableDeployment:
        required: true
        type: boolean
        default: true
        description: "Enable Deployment (Default On)"
      connectionName:
        required: false
        type: string
        default: false
        description: "Connection Names separated by ,"
      connectionRg:
        required: false
        type: string
        default: false
        description: "Connection Resource Group "

jobs:
  Build:
    runs-on: [self-hosted]
    if: ${{github.event.inputs.enableDeployment == 'true' && always()}}
    needs: ProcessApiMetadata
    environment: ${{ github.event.inputs.environment}}
    env:
      ARM_CLIENT_ID: ${{ secrets.client_id }}
      ARM_CLIENT_CERTIFICATE_PASSWORD: ${{ secrets.client_certificate_password }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
      ARM_TENANT_ID: ${{ secrets.tenant_id }}
      ARM_CERT_THUMBPRINT: ${{ secrets.cert_thumbprint }}
      RG_CONNECTION: ${{ github.event.inputs.connectionRg}}
      ARM_KEYVAULT: ${{ secrets.ARM_KEYVAULT }}
  

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.commitid }}
      - name: Check Az Login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Check Connections
        shell: pwsh
        run: |
              pwd
              echo "Check Connections"
              if ("${{github.event.inputs.connections}}" -eq "true")
              {
                echo "Connection needed"
                
                $valuesToSplit="${{github.event.inputs.connectionName}}"
                $connections_rg="${{env.RG_CONNECTION}}"
                $connection_values= $valuesToSplit -split "," 
                $body="";

                foreach($value in $connection_values)
                  {   
                    $authentication_value="ManagedServiceIdentity"
                    $connection_value = (az resource show --name "$value" --resource-group "$connections_rg" --resource-type "Microsoft.web/connections" --query "id") -replace '"',''
                    $api_id_value = (az resource show --name "$value" --resource-group "$connections_rg" --resource-type "Microsoft.web/connections" --query "properties.api.id") -replace '"',''
                    $connectionRuntimeUrl_value = (az resource show --name "$value" --resource-group "$connections_rg" --resource-type "Microsoft.web/connections" --query "properties.connectionRuntimeUrl") -replace '"',''
                    $tmp = '
                        "'+$value+'": {
                            "api": {
                                "id": "'+$api_id_value+'"
                            },
                            "authentication": {
                                "type": "'+$authentication_value+'"
                            },
                            "connection": {
                                "id": "'+$connection_value+'"
                            },
                            "connectionRuntimeUrl": "'+$connectionRuntimeUrl_value+'"
                        }'
                    if($body)
                      {
                      $body = $body+","+$tmp
                      }
                    else
                      {
                      $body = $tmp
                      }                   
                  }
                mkdir managedconnecter
                touch managedconnecter/managedconnections.json
                $path="managedconnecter/managedconnections.json"
                $p_init = '
                {
                        "managedApiConnections": {'
                $p_end = "}"
                #$json= $p_init+$body+$p_end
                #$json | Out-File -FilePath $path
                $connectorpath= "apps/${{github.event.inputs.appname}}/connections.json"
                if (Test-Path $connectorpath)
                {
                  $tempjson1 = Get-Content $connectorpath -Raw
                  $tempjson1 = $tempjson1.TrimStart("{")
                  $tempjson1 = $tempjson1.TrimEnd("}")
                  $json= $p_init+$body+$p_end+","+$tempjson1
                  $json | Out-File -FilePath $connectorpath
                }
                else
                {
                $json= $p_init+$body+$p_end+$p_end
                $json | Out-File -FilePath $connectorpath
                }  
              }
              echo "end check"
      - name: Compress app
        shell: pwsh
        run: |
              pwd
              ls
              cd apps/${{github.event.inputs.appname}}
              $parameter="parameters/parameters.${{github.event.inputs.environment}}.json"
              if (Test-Path $parameter)
              {
                cp $parameter .
                mv parameters.${{github.event.inputs.environment}}.json parameters.json
              }
              else
              {
                Write-host "Parameter not present"
              }
              mkdir -p ../output
              zip -r ../output/${{github.event.inputs.appname}}.zip .
              ls ../output
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{github.event.inputs.appname}}.zip
          path: ${{ github.workspace }}/apps/output/${{github.event.inputs.appname}}.zip
          retention-days: 1
  Deploy:
    name: Deploy
    runs-on: [self-hosted]
    if: ${{github.event.inputs.enableDeployment == 'true' && always() && needs.Build.result == 'success' }}
    needs: [Build]
    environment: ${{ github.event.inputs.environment}}
    env:
      ARM_CLIENT_ID: ${{ secrets.client_id }}
      ARM_CLIENT_CERTIFICATE_PASSWORD: ${{ secrets.client_certificate_password }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
      ARM_TENANT_ID: ${{ secrets.tenant_id }}
      ARM_CERT_THUMBPRINT: ${{ secrets.cert_thumbprint }}
    defaults:
      run: 
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check Login
        run: | 
            Connect-AzAccount -ServicePrincipal -ApplicationId "${{env.ARM_CLIENT_ID}}" -Tenant "${{env.ARM_TENANT_ID}}" -CertificateThumbprint "${{env.ARM_CERT_THUMBPRINT}}"
            Set-AzContext -Subscription "${{ env.ARM_SUBSCRIPTION_ID }}"
      - name: Get publish Profile
        uses: azure/powershell@v1
        id: la_profile
        with:
          inlineScript: |
            $profile = Get-AzWebAppPublishingProfile -ResourceGroupName ${{github.event.inputs.resourceGroupName}} -Name ${{github.event.inputs.logicAppName}}
            $profile = $profile.Replace("`r", "").Replace("`n", "")
            Write-Output "profile=$profile" >> $env:GITHUB_OUTPUT
          azPSVersion: "latest"
      - uses: actions/download-artifact@master
        with:
         name: ${{github.event.inputs.appname}}.zip
         path: ./output/
      - name: Deploy to Azure Logic App
        uses: Azure/functions-action@v1.4.8
        id: la
        with:
          app-name: ${{github.event.inputs.logicAppName}}
          package: ./output/${{github.event.inputs.appname}}.zip
          publish-profile: ${{steps.la_profile.outputs.profile}}
