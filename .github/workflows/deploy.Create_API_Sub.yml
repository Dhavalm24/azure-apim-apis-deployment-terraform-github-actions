name: APIM_Subscription_Creation
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Choose the environment"
        options:
          - Dev
          - UAT
          - PRD
        required: true
      APIProductName:
        description: "Enter the Product ID to associate with the Subscription"
        required: true
      APISubsName:
        description: "Enter Subscription Name"
        required: true
      RegenerateSubscriptionKeys:
        required: false
        type: choice
        options:
          - PrimaryKey
          - SecondaryKey
          - BothTheKeys        
        description: "Regenerate Subscription Keys (Default Off)"

env:
  ARM_CLIENT_ID: ${{ secrets.client_id }}
  ARM_CLIENT_CERTIFICATE_PASSWORD: ${{ secrets.client_certificate_password }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
  ARM_TENANT_ID: ${{ secrets.tenant_id }}
  ARM_CERT_THUMBPRINT: ${{ secrets.cert_thumbprint }}
  ARM_KEYVAULT: ${{ secrets.ARM_KEYVAULT }}
  APIM_NAME : ${{ vars.APIM_Name }}
  APIM_RG : ${{ vars.APIM_RG }}
  RUNNER_USER : ${{ secrets.RUNNER_USER }}

jobs:

  APIM_Subs_Create:
    name: Create a APIM Subscription and Associate with a Product
    runs-on: [self-hosted]
    outputs:
      primary_key: ${{ steps.Addsubs.outputs.primary_key }}
      secondary_key: ${{ steps.Addsubs.outputs.secondary_key }}
    environment: ${{ github.event.inputs.environment}}
    defaults:
      run: 
        shell: pwsh
    steps:
      - name: Check Login
        run: | 
            Connect-AzAccount -ServicePrincipal -ApplicationId "${{env.ARM_CLIENT_ID}}" -Tenant "${{env.ARM_TENANT_ID}}" -CertificateThumbprint "${{env.ARM_CERT_THUMBPRINT}}"
            Set-AzContext -Subscription "${{ env.ARM_SUBSCRIPTION_ID }}"
      - name: Create a APIM Subscription and Associate with a Product
        id: Addsubs
        run: |

          if ($${{github.event.inputs.RegenerateSubscriptionKeys == 'PrimaryKey'}})
          {

          az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p /home/${{ env.RUNNER_USER }}/Certs/spn.pem --tenant ${{ env.ARM_TENANT_ID }}
          az account set --subscription ${{ env.ARM_SUBSCRIPTION_ID }} 

          az rest --method post --uri https://management.azure.com/subscriptions/"${{ env.ARM_SUBSCRIPTION_ID }}"/resourceGroups/"${{env.APIM_RG}}"/providers/Microsoft.ApiManagement/service/${{env.APIM_NAME}}/subscriptions/${{github.event.inputs.APISubsName}}/regeneratePrimaryKey?api-version=2022-08-01
          
          Connect-AzAccount -ServicePrincipal -ApplicationId "${{env.ARM_CLIENT_ID}}" -Tenant "${{env.ARM_TENANT_ID}}" -CertificateThumbprint "${{env.ARM_CERT_THUMBPRINT}}"
          Set-AzContext -Subscription "${{ env.ARM_SUBSCRIPTION_ID }}"
            
          $apimContext = New-AzApiManagementContext -ResourceId ((Get-AzApiManagement -ResourceGroupName ${{env.APIM_RG}} -Name ${{env.APIM_NAME}}).Id)
          Set-AzApiManagementSubscription -Context $apimContext -SubscriptionId "${{github.event.inputs.APISubsName}}" -State "Active"

          }

          if ($${{github.event.inputs.RegenerateSubscriptionKeys == 'SecondaryKey'}})
          {

          az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p /home/${{ env.RUNNER_USER }}/Certs/spn.pem --tenant ${{ env.ARM_TENANT_ID }}
          az account set --subscription ${{ env.ARM_SUBSCRIPTION_ID }} 

          az rest --method post --uri https://management.azure.com/subscriptions/"${{ env.ARM_SUBSCRIPTION_ID }}"/resourceGroups/"${{env.APIM_RG}}"/providers/Microsoft.ApiManagement/service/${{env.APIM_NAME}}/subscriptions/${{github.event.inputs.APISubsName}}/regenerateSecondaryKey?api-version=2022-08-01
          
          Connect-AzAccount -ServicePrincipal -ApplicationId "${{env.ARM_CLIENT_ID}}" -Tenant "${{env.ARM_TENANT_ID}}" -CertificateThumbprint "${{env.ARM_CERT_THUMBPRINT}}"
          Set-AzContext -Subscription "${{ env.ARM_SUBSCRIPTION_ID }}"
            
          $apimContext = New-AzApiManagementContext -ResourceId ((Get-AzApiManagement -ResourceGroupName ${{env.APIM_RG}} -Name ${{env.APIM_NAME}}).Id)
          Set-AzApiManagementSubscription -Context $apimContext -SubscriptionId "${{github.event.inputs.APISubsName}}" -State "Active"

          }

          if ($${{github.event.inputs.RegenerateSubscriptionKeys == 'BothTheKeys'}})
          {

          az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p /home/${{ env.RUNNER_USER }}/Certs/spn.pem --tenant ${{ env.ARM_TENANT_ID }}
          az account set --subscription ${{ env.ARM_SUBSCRIPTION_ID }} 
          
          az rest --method post --uri https://management.azure.com/subscriptions/"${{ env.ARM_SUBSCRIPTION_ID }}"/resourceGroups/"${{env.APIM_RG}}"/providers/Microsoft.ApiManagement/service/${{env.APIM_NAME}}/subscriptions/${{github.event.inputs.APISubsName}}/regeneratePrimaryKey?api-version=2022-08-01

          az rest --method post --uri https://management.azure.com/subscriptions/"${{ env.ARM_SUBSCRIPTION_ID }}"/resourceGroups/"${{env.APIM_RG}}"/providers/Microsoft.ApiManagement/service/${{env.APIM_NAME}}/subscriptions/${{github.event.inputs.APISubsName}}/regenerateSecondaryKey?api-version=2022-08-01
          
          Connect-AzAccount -ServicePrincipal -ApplicationId "${{env.ARM_CLIENT_ID}}" -Tenant "${{env.ARM_TENANT_ID}}" -CertificateThumbprint "${{env.ARM_CERT_THUMBPRINT}}"
          Set-AzContext -Subscription "${{ env.ARM_SUBSCRIPTION_ID }}"
            
          $apimContext = New-AzApiManagementContext -ResourceId ((Get-AzApiManagement -ResourceGroupName ${{env.APIM_RG}} -Name ${{env.APIM_NAME}}).Id)
          Set-AzApiManagementSubscription -Context $apimContext -SubscriptionId "${{github.event.inputs.APISubsName}}" -State "Active"

          }
          
          $apimContext = New-AzApiManagementContext -ResourceId ((Get-AzApiManagement -ResourceGroupName ${{env.APIM_RG}} -Name ${{env.APIM_NAME}}).Id)
          Try
            {
            Get-AzApiManagementSubscription -Context $apimContext -SubscriptionId ${{github.event.inputs.APISubsName}} -ErrorAction Stop
            $subscription = Get-AzApiManagementSubscriptionKey -Context $apimContext -SubscriptionId "${{github.event.inputs.APISubsName}}" -ErrorAction Stop
            $global:primaryKey = $subscription.PrimaryKey
            $global:secondaryKey = $subscription.SecondaryKey
            $primarySecretValue = ConvertTo-SecureString -String $primaryKey -AsPlainText -Force
            $SecondaryKeyValue = ConvertTo-SecureString -String $secondaryKey -AsPlainText -Force
            Set-AzKeyVaultSecret -VaultName "${{env.ARM_KEYVAULT}}" -Name ("${{github.event.inputs.APISubsName}}"+"--PrimaryKey") -SecretValue $primarySecretValue  -ErrorAction Stop
            Set-AzKeyVaultSecret -VaultName "${{env.ARM_KEYVAULT}}" -Name ("${{github.event.inputs.APISubsName}}"+"--SecondaryKey") -SecretValue $SecondaryKeyValue  -ErrorAction Stop
            }
          Catch
            {
            New-AzApiManagementSubscription -Context $apimContext -Scope "/products/${{github.event.inputs.APIProductName}}" -Name ${{github.event.inputs.APISubsName}} -SubscriptionId ${{github.event.inputs.APISubsName}}
            $subscription = Get-AzApiManagementSubscriptionKey -Context $apimContext -SubscriptionId "${{github.event.inputs.APISubsName}}"
            $global:primaryKey = $subscription.PrimaryKey
            $global:secondaryKey = $subscription.SecondaryKey
            $primarySecretValue = ConvertTo-SecureString -String $primaryKey -AsPlainText -Force
            $SecondaryKeyValue = ConvertTo-SecureString -String $secondaryKey -AsPlainText -Force
            Set-AzKeyVaultSecret -VaultName "${{env.ARM_KEYVAULT}}" -Name ("${{github.event.inputs.APISubsName}}"+"--PrimaryKey") -SecretValue $primarySecretValue
            Set-AzKeyVaultSecret -VaultName "${{env.ARM_KEYVAULT}}" -Name ("${{github.event.inputs.APISubsName}}"+"--SecondaryKey") -SecretValue $SecondaryKeyValue
            }
            echo "primary_key=$global:primaryKey" >> "$env:GITHUB_OUTPUT"
            echo "secondary_key=$global:secondaryKey" >> "$env:GITHUB_OUTPUT"